// 
// *  This file was automatically generated by MoMEMta-MaGMEE,
// *  A MadGraph Matrix Element Exporter plugin for MoMEMta.
// *
// *  It is subject to MoMEMta-MaGMEE's license and copyright:
// *
// *  Copyright (C) 2016  Universite catholique de Louvain (UCL), Belgium
// *
// *  This program is free software: you can redistribute it and/or modify
// *  it under the terms of the GNU General Public License as published by
// *  the Free Software Foundation, either version 3 of the License, or
// *  (at your option) any later version.
// *
// *  This program is distributed in the hope that it will be useful,
// *  but WITHOUT ANY WARRANTY; without even the implied warranty of
// *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// *  GNU General Public License for more details.
// *
// *  You should have received a copy of the GNU General Public License
// *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
// 

#include <string> 
#include <utility> 
#include <vector> 
#include <map> 
#include <iostream>
#include <P1_Sigma_sm_gg_bepvebxemvexh.h> 
#include <HelAmps_sm.h> 

#include <momemta/ParameterSet.h> 
#include <momemta/SLHAReader.h> 

namespace pp_ttH_fullyLept_H_inv_sm 
{

//==========================================================================
// Class member functions for calculating the matrix elements for
// Process: g g > t t~ h WEIGHTED<=4 @1
// *   Decay: t > b w+ WEIGHTED<=2
// *     Decay: w+ > e+ ve WEIGHTED<=2
// *   Decay: t~ > b~ w- WEIGHTED<=2
// *     Decay: w- > e- ve~ WEIGHTED<=2
// Process: u u~ > t t~ h WEIGHTED<=4 @1
// *   Decay: t > b w+ WEIGHTED<=2
// *     Decay: w+ > e+ ve WEIGHTED<=2
// *   Decay: t~ > b~ w- WEIGHTED<=2
// *     Decay: w- > e- ve~ WEIGHTED<=2
// Process: c c~ > t t~ h WEIGHTED<=4 @1
// *   Decay: t > b w+ WEIGHTED<=2
// *     Decay: w+ > e+ ve WEIGHTED<=2
// *   Decay: t~ > b~ w- WEIGHTED<=2
// *     Decay: w- > e- ve~ WEIGHTED<=2
// Process: d d~ > t t~ h WEIGHTED<=4 @1
// *   Decay: t > b w+ WEIGHTED<=2
// *     Decay: w+ > e+ ve WEIGHTED<=2
// *   Decay: t~ > b~ w- WEIGHTED<=2
// *     Decay: w- > e- ve~ WEIGHTED<=2
// Process: s s~ > t t~ h WEIGHTED<=4 @1
// *   Decay: t > b w+ WEIGHTED<=2
// *     Decay: w+ > e+ ve WEIGHTED<=2
// *   Decay: t~ > b~ w- WEIGHTED<=2
// *     Decay: w- > e- ve~ WEIGHTED<=2

//--------------------------------------------------------------------------

// Initialize process.

P1_Sigma_sm_gg_bepvebxemvexh::P1_Sigma_sm_gg_bepvebxemvexh(const ParameterSet&
    configuration)
{

  std::string param_card = configuration.get < std::string > ("card"); 
  params.reset(new Parameters_sm(SLHA::Reader(param_card))); 

  // Set external particle masses for this matrix element
  mME.push_back(params->ZERO); 
  mME.push_back(params->ZERO); 
  mME.push_back(params->mdl_MB); 
  mME.push_back(params->ZERO); 
  mME.push_back(params->ZERO); 
  mME.push_back(params->mdl_MB); 
  mME.push_back(params->ZERO); 
  mME.push_back(params->ZERO); 
  mME.push_back(params->mdl_MH); 

  mapFinalStates[{5, -11, 12, -5, 11, -12, 25}] = 
  {
    {
      &P1_Sigma_sm_gg_bepvebxemvexh::matrix_1_gg_ttxh_t_bwp_wp_epve_tx_bxwm_wm_emvex, 
      false, 
      {
        std::make_pair(21, 21)
      }, 
      256, 
      256
    }
    , 
    {
      &P1_Sigma_sm_gg_bepvebxemvexh::matrix_1_uux_ttxh_t_bwp_wp_epve_tx_bxwm_wm_emvex, 
      true, 
      {
        std::make_pair(2, -2), std::make_pair(4, -4), std::make_pair(1, -1),
            std::make_pair(3, -3)
      }, 
      256, 
      36
    }
  }; 

}

//--------------------------------------------------------------------------
// Evaluate |M|^2, return a map of final states

std::map < std::pair < int, int > , double >
    P1_Sigma_sm_gg_bepvebxemvexh::compute(const std::pair < std::vector<double>
    , std::vector<double> > &initialMomenta, const std::vector < std::pair <
    int, std::vector<double> > > &finalState)
{

  // Set initial particle momenta
  momenta[0] = (double * ) (&initialMomenta.first[0]); 
  momenta[1] = (double * ) (&initialMomenta.second[0]); 

  // Suppose final particles are passed in the "correct" order
  std::vector<int> selectedFinalState(9 - 2);
  std::cout << "initial: ";
  for (size_t index = 0; index < (9 - 2); index++ )
  {
    selectedFinalState[index] = finalState[index].first;
    std::cout << " " << index;
    momenta[index + 2] = (double * ) (&finalState[index].second[0]); 
  }
  std::cout << endl;

  // Set the event specific parameters
  params->updateParameters(); 
  params->updateCouplings(); 

  // Initialise result object
  std::map < std::pair < int, int > , double > result; 

  // Define permutation
  int perm[9]; 
  for(int i = 0; i < 9; i++ )
  {
    perm[i] = i; 
  }

  for(auto &me: mapFinalStates[selectedFinalState])
  {

    double me_sum = 0; 
    double me_mirror_sum = 0; 

    for(int ihel = 0; ihel < 256; ihel++ )
    {

      if(me.goodHel[ihel])
      {

        double sum = 0.; 
        calculate_wavefunctions(perm, helicities[ihel]); 
        double meTemp = me.callback( * this); 
        sum += meTemp; 
        me_sum += meTemp/me.denominator; 

        if(me.hasMirrorProcess)
        {
          perm[0] = 1; 
          perm[1] = 0; 
          // Calculate wavefunctions
          calculate_wavefunctions(perm, helicities[ihel]); 
          // Mirror back
          perm[0] = 0; 
          perm[1] = 1; 
          meTemp = me.callback( * this); 
          sum += meTemp; 
          me_mirror_sum += meTemp/me.denominator; 
        }

        if( !sum)
          me.goodHel[ihel] = false; 
      }
    }

    for (auto const &initialState: me.initialStates)
    {
      result[initialState] = me_sum; 
      if (me.hasMirrorProcess)
        result[std::make_pair(initialState.second, initialState.first)] =
            me_mirror_sum;
    }
    std::cout << "in loop: " << me_sum << std::endl;
  }


  return result; 
}

//==========================================================================
// Private class member functions

//--------------------------------------------------------------------------
// Evaluate |M|^2 for each subprocess

void P1_Sigma_sm_gg_bepvebxemvexh::calculate_wavefunctions(const int perm[],
    const int hel[])
{
  // Calculate wavefunctions for all processes
  static std::complex<double> w[23][18]; 

  // Calculate all wavefunctions
  vxxxxx(&momenta[perm[0]][0], mME[0], hel[0], -1, w[0]); 
  vxxxxx(&momenta[perm[1]][0], mME[1], hel[1], -1, w[1]); 
  oxxxxx(&momenta[perm[2]][0], mME[2], hel[2], +1, w[2]); 
  ixxxxx(&momenta[perm[3]][0], mME[3], hel[3], -1, w[3]); 
  oxxxxx(&momenta[perm[4]][0], mME[4], hel[4], +1, w[4]); 
  FFV2_3(w[3], w[4], params->GC_100, params->mdl_MW, params->mdl_WW, w[5]); 
  FFV2_1(w[2], w[5], params->GC_100, params->mdl_MT, params->mdl_WT, w[6]); 
  ixxxxx(&momenta[perm[5]][0], mME[5], hel[5], -1, w[7]); 
  oxxxxx(&momenta[perm[6]][0], mME[6], hel[6], +1, w[8]); 
  ixxxxx(&momenta[perm[7]][0], mME[7], hel[7], -1, w[9]); 
  FFV2_3(w[9], w[8], params->GC_100, params->mdl_MW, params->mdl_WW, w[10]); 
  FFV2_2(w[7], w[10], params->GC_100, params->mdl_MT, params->mdl_WT, w[11]); 
  sxxxxx(&momenta[perm[8]][0], +1, w[12]); 
  VVV1P0_1(w[0], w[1], params->GC_10, params->ZERO, params->ZERO, w[13]); 
  FFS4_1(w[6], w[12], params->GC_94, params->mdl_MT, params->mdl_WT, w[14]); 
  FFS4_2(w[11], w[12], params->GC_94, params->mdl_MT, params->mdl_WT, w[15]); 
  FFV1_1(w[6], w[0], params->GC_11, params->mdl_MT, params->mdl_WT, w[16]); 
  FFV1_2(w[11], w[1], params->GC_11, params->mdl_MT, params->mdl_WT, w[17]); 
  FFV1_2(w[11], w[0], params->GC_11, params->mdl_MT, params->mdl_WT, w[18]); 
  FFV1_1(w[6], w[1], params->GC_11, params->mdl_MT, params->mdl_WT, w[19]); 
  ixxxxx(&momenta[perm[0]][0], mME[0], hel[0], +1, w[20]); 
  oxxxxx(&momenta[perm[1]][0], mME[1], hel[1], -1, w[21]); 
  FFV1P0_3(w[20], w[21], params->GC_11, params->ZERO, params->ZERO, w[22]); 

  // Calculate all amplitudes
  // Amplitude(s) for diagram number 0
  FFV1_0(w[11], w[14], w[13], params->GC_11, amp[0]); 
  FFV1_0(w[15], w[6], w[13], params->GC_11, amp[1]); 
  FFS4_0(w[17], w[16], w[12], params->GC_94, amp[2]); 
  FFV1_0(w[15], w[16], w[1], params->GC_11, amp[3]); 
  FFS4_0(w[18], w[19], w[12], params->GC_94, amp[4]); 
  FFV1_0(w[18], w[14], w[1], params->GC_11, amp[5]); 
  FFV1_0(w[15], w[19], w[0], params->GC_11, amp[6]); 
  FFV1_0(w[17], w[14], w[0], params->GC_11, amp[7]); 
  FFV1_0(w[11], w[14], w[22], params->GC_11, amp[8]); 
  FFV1_0(w[15], w[6], w[22], params->GC_11, amp[9]); 

}
double P1_Sigma_sm_gg_bepvebxemvexh::matrix_1_gg_ttxh_t_bwp_wp_epve_tx_bxwm_wm_emvex() 
{

  static std::complex<double> ztemp; 
  static std::complex<double> jamp[2]; 
  // The color matrix
  static const double denom[2] = {3, 3}; 
  static const double cf[2][2] = {{16, -2}, {-2, 16}}; 

  // Calculate color flows
  static const std::complex<double> cI(0., 1.); 
  jamp[0] = -cI * amp[0] - cI * amp[1] + amp[2] + amp[3] + amp[7]; 
  jamp[1] = +cI * amp[0] + cI * amp[1] + amp[4] + amp[5] + amp[6]; 

  // Sum and square the color flows to get the matrix element
  double matrix = 0; 
  for(int i = 0; i < 2; i++ )
  {
    ztemp = 0.; 
    for(int j = 0; j < 2; j++ )
      ztemp = ztemp + cf[i][j] * jamp[j]; 
    matrix = matrix + real(ztemp * conj(jamp[i]))/denom[i]; 
  }

  return matrix; 
}

double P1_Sigma_sm_gg_bepvebxemvexh::matrix_1_uux_ttxh_t_bwp_wp_epve_tx_bxwm_wm_emvex() 
{

  static std::complex<double> ztemp; 
  static std::complex<double> jamp[2]; 
  // The color matrix
  static const double denom[2] = {1, 1}; 
  static const double cf[2][2] = {{9, 3}, {3, 9}}; 

  // Calculate color flows
  jamp[0] = +1./2. * (-1./3. * amp[8] - 1./3. * amp[9]); 
  jamp[1] = +1./2. * (+amp[8] + amp[9]); 

  // Sum and square the color flows to get the matrix element
  double matrix = 0; 
  for(int i = 0; i < 2; i++ )
  {
    ztemp = 0.; 
    for(int j = 0; j < 2; j++ )
      ztemp = ztemp + cf[i][j] * jamp[j]; 
    matrix = matrix + real(ztemp * conj(jamp[i]))/denom[i]; 
  }

  return matrix; 
}



}

// Register matrix element with MoMEMta
#include <momemta/MatrixElementFactory.h> 
REGISTER_MATRIX_ELEMENT("pp_ttH_fullyLept_H_inv_sm_P1_Sigma_sm_gg_bepvebxemvexh", pp_ttH_fullyLept_H_inv_sm::P1_Sigma_sm_gg_bepvebxemvexh); 

